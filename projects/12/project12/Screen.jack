// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean pen;
    static array twoToThe;
    static array screen;
    /** Initializes the Screen. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        let pen = true;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let pen = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;
        let address = (32 * y) + (x / 16);
        let mask = twoToThe[x & 15];
        if(pen){
            let screen[address] = screen[address] | mask;
        }else{
            let screen[address] = screen[address] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx,dy;
        var int a,b;
        var int adyMinusbdx;
        var int temp;
        let temp = 0;
        let a = 0;
        let b = 0;
        if(x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy = 0) {
            do Screen.drawHLine(x1, x2, y1);
        } else {
            if (dx = 0) {
                do Screen.drawVLine(x1, y1, y2);
            } else {
                let adyMinusbdx = 0;
                if (y1 < y2) {
                    let a = 0;
                    let b = 0;
                    while (~(a > dx) & ~(b > dy)) {
                        do Screen.drawPixel(x1 + a, y1 + b);
                        if (adyMinusbdx < 0) {
                            let a = a + 1;
                            let adyMinusbdx = adyMinusbdx + dy;
                        }
                        else {
                            let b = b + 1;
                            let adyMinusbdx = adyMinusbdx - dx;
                        }
                    }
                } else {
                    let a = 0;
                    let b = 0;
                    let dy = -dy;
                    while(~(a > dx) & ~(b > dy)) {
                       do Screen.drawPixel(x1 + a, y1 - b);
                       if (adyMinusbdx < 0) {
                           let a = a + 1;
                           let adyMinusbdx = adyMinusbdx + dy;
                       }
                       else {
                           let b = b + 1;
                           let adyMinusbdx = adyMinusbdx - dx;
                       }
                   }
               }
            }
        }
        return;
    }

    function void drawHLine(int x1, int x2, int y){
        var int temp;
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while(~(x2 < x1)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }

        return;
    }

    function void drawVLine(int x, int y1, int y2){
        var int temp;

        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while( ~(y1 > y2) ) {
            do Screen.drawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    var int dx, dy;
    var int rSquared;
    let rSquared = r * r;
    let dy = -r;
    while (~(dy > r)) {
        let dx = Math.sqrt(rSquared - (dy * dy));
        do Screen.drawHLine((x - dx), (x + dx), y + dy);
        let dy = dy + 1;
    }
    return;
    }



}
