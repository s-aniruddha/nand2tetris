/**
 * This class represents player ("jumper") who tries to avoid obstacles
 * to survive. Up arrow key is used to jump to avoid obstacle.
 */
class Jumper{
    field int height;
    field int x, y;
    field boolean Alive;
    field int lateralmove;     
    
    constructor Jumper new() {
        let height = 0;
        let Alive = true;
        let lateralmove = 0;  
        let x = 64;
        let y = (192 - height);
        do draw();
        return this;
    }
    
    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method boolean getheight() {
        return height;
    }

    method boolean getAlive() {
        return Alive;
    }

    method void setposition(int Ax, int Ay) {
        let height = Ay;
        let lateralmove = Ax;
        let Alive = true;
        let x = 64 + (16 * (lateralmove));
        let y = (192 -height);
        return;
    }
   
    method void kill() {
        let Alive = false;
        return;
    }
    
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }  
       
    method void draw() {
        var int memAddress1; 
        var int memAddress2; 
        var int memAddress3; 
        var int memAddress4;

        let memAddress1 = 16384 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress2 = 16385 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress3 = 16896 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress4 = 16897 + 6144 + 4 - (height * 32) + lateralmove;
            
        //top left
        do Memory.poke(memAddress1 + 0, -256);
        do Memory.poke(memAddress1 + 32, -256);
        do Memory.poke(memAddress1 + 64, 32704);
        do Memory.poke(memAddress1 + 96, 32704);
        do Memory.poke(memAddress1 + 128, 32752);
        do Memory.poke(memAddress1 + 160, 32752);
        do Memory.poke(memAddress1 + 192, 15);
        do Memory.poke(memAddress1 + 224, 15);
        do Memory.poke(memAddress1 + 256, -4);
        do Memory.poke(memAddress1 + 288, -4);
        do Memory.poke(memAddress1 + 320, 12);
        do Memory.poke(memAddress1 + 352, 12);
        do Memory.poke(memAddress1 + 384, 240);
        do Memory.poke(memAddress1 + 416, 240);
        do Memory.poke(memAddress1 + 448, 240);
        do Memory.poke(memAddress1 + 480, 240);

        //top right
        do Memory.poke(memAddress2  +0, 1023);
        do Memory.poke(memAddress2  +32, 1023);
        do Memory.poke(memAddress2  +64, 4095);
        do Memory.poke(memAddress2  +96, 4095);
        do Memory.poke(memAddress2  +128, 16383);
        do Memory.poke(memAddress2  +160, 16383);
        do Memory.poke(memAddress2  +192, 3072);
        do Memory.poke(memAddress2  +224, 3072);
        do Memory.poke(memAddress2  +256, 16383);
        do Memory.poke(memAddress2  +288, 16383);
        do Memory.poke(memAddress2  +320, 16191);
        do Memory.poke(memAddress2  +352, 16191);
        do Memory.poke(memAddress2  +384, 3072);
        do Memory.poke(memAddress2  +416, 3072);
        do Memory.poke(memAddress2  +448, 768);
        do Memory.poke(memAddress2  +480, 768);


        //bottom left
        do Memory.poke(memAddress3  +0, 960);
        do Memory.poke(memAddress3  +32, 960);
        do Memory.poke(memAddress3  +64, -16);
        do Memory.poke(memAddress3  +96, -16);
        do Memory.poke(memAddress3  +128, -16);
        do Memory.poke(memAddress3  +160, -16);
        do Memory.poke(memAddress3  +192, -16);
        do Memory.poke(memAddress3  +224, -16);
        do Memory.poke(memAddress3  +256, -52);
        do Memory.poke(memAddress3  +288, -52);
        do Memory.poke(memAddress3  +320, -244);
        do Memory.poke(memAddress3  +352, -244);
        do Memory.poke(memAddress3  +384, 16140);
        do Memory.poke(memAddress3  +416, 16140);
        do Memory.poke(memAddress3  +448, 240);
        do Memory.poke(memAddress3  +480, 240);
        

        //bottom right
        do Memory.poke(memAddress4 +0, 192);
        do Memory.poke(memAddress4 +32, 192);
        do Memory.poke(memAddress4 +64, 1023);
        do Memory.poke(memAddress4 +96, 1023);
        do Memory.poke(memAddress4 +128, 3087);
        do Memory.poke(memAddress4 +160, 3087);
        do Memory.poke(memAddress4 +192, 783);
        do Memory.poke(memAddress4 +224, 783);
        do Memory.poke(memAddress4 +256, 255);
        do Memory.poke(memAddress4 +288, 255);
        do Memory.poke(memAddress4 +320, 4035);
        do Memory.poke(memAddress4 +352, 4035);
        do Memory.poke(memAddress4 +384, 3075);
        do Memory.poke(memAddress4 +416, 3075);
        do Memory.poke(memAddress4 +448, 1020);
        do Memory.poke(memAddress4 +480, 1020);
        return;
    }

    method void erase() {
        var int memAddress1; 
        var int memAddress2; 
        var int memAddress3; 
        var int memAddress4;

        let memAddress1 = 16384 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress2 = 16385 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress3 = 16896 + 6144 + 4 - (height * 32) + lateralmove;
        let memAddress4 = 16897 + 6144 + 4 - (height * 32) + lateralmove;
                
        do Memory.poke(memAddress1 + 0, 0);
        do Memory.poke(memAddress1 + 32, 0);
        do Memory.poke(memAddress1 + 64, 0);
        do Memory.poke(memAddress1 + 96, 0);
        do Memory.poke(memAddress1 + 128, 0);
        do Memory.poke(memAddress1 + 160, 0);
        do Memory.poke(memAddress1 + 192, 0);
        do Memory.poke(memAddress1 + 224, 0);
        do Memory.poke(memAddress1 + 256, 0);
        do Memory.poke(memAddress1 + 288, 0);
        do Memory.poke(memAddress1 + 320, 0);
        do Memory.poke(memAddress1 + 352, 0);
        do Memory.poke(memAddress1 + 384, 0);
        do Memory.poke(memAddress1 + 416, 0);
        do Memory.poke(memAddress1 + 448, 0);
        do Memory.poke(memAddress1 + 480, 0);

        //top right
        do Memory.poke(memAddress2  +0, 0);
        do Memory.poke(memAddress2  +32, 0);
        do Memory.poke(memAddress2  +64, 0);
        do Memory.poke(memAddress2  +96, 0);
        do Memory.poke(memAddress2  +128, 0);
        do Memory.poke(memAddress2  +160, 0);
        do Memory.poke(memAddress2  +192, 0);
        do Memory.poke(memAddress2  +224, 0);
        do Memory.poke(memAddress2  +256, 0);
        do Memory.poke(memAddress2  +288, 0);
        do Memory.poke(memAddress2  +320, 0);
        do Memory.poke(memAddress2  +352, 0);
        do Memory.poke(memAddress2  +384, 0);
        do Memory.poke(memAddress2  +416, 0);
        do Memory.poke(memAddress2  +448, 0);
        do Memory.poke(memAddress2  +480, 0);


        //bottom left
        do Memory.poke(memAddress3  +0, 0);
        do Memory.poke(memAddress3  +32, 0);
        do Memory.poke(memAddress3  +64, 0);
        do Memory.poke(memAddress3  +96, 0);
        do Memory.poke(memAddress3  +128, 0);
        do Memory.poke(memAddress3  +160, 0);
        do Memory.poke(memAddress3  +192, 0);
        do Memory.poke(memAddress3  +224, 0);
        do Memory.poke(memAddress3  +256, 0);
        do Memory.poke(memAddress3  +288, 0);
        do Memory.poke(memAddress3  +320, 0);
        do Memory.poke(memAddress3  +352, 0);
        do Memory.poke(memAddress3  +384, 0);
        do Memory.poke(memAddress3  +416, 0);
        do Memory.poke(memAddress3  +448, 0);
        do Memory.poke(memAddress3  +480, 0);
        

        //bottom right
        do Memory.poke(memAddress4 +0, 0);
        do Memory.poke(memAddress4 +32, 0);
        do Memory.poke(memAddress4 +64, 0);
        do Memory.poke(memAddress4 +96, 0);
        do Memory.poke(memAddress4 +128, 0);
        do Memory.poke(memAddress4 +160, 0);
        do Memory.poke(memAddress4 +192, 0);
        do Memory.poke(memAddress4 +224, 0);
        do Memory.poke(memAddress4 +256, 0);
        do Memory.poke(memAddress4 +288, 0);
        do Memory.poke(memAddress4 +320, 0);
        do Memory.poke(memAddress4 +352, 0);
        do Memory.poke(memAddress4 +384, 0);
        do Memory.poke(memAddress4 +416, 0);
        do Memory.poke(memAddress4 +448, 0);
        do Memory.poke(memAddress4 +480, 0);
        return;
    }
   
    method void motionUp(){
        if (height < 48) {     
            do erase();
            let height = height + 12;
            if (lateralmove < 9) {
                let lateralmove = lateralmove + 1;
            }
            let x = 64 + (16 * (lateralmove));
            let y = (192 -height);
            do draw();
            return;
        } else {
            return;
        }
    }

    method void motionDown() {
        if (height > 0) { 
            do erase();
            let height = height - 12;
            if (lateralmove < 9) {
                let lateralmove = lateralmove + 1;
            }
            let x = 64 + (16 * (lateralmove));
            let y = (192 -height);
            do draw();
            return;
        } else {
            return;
        }
    }

    method void jump() {
        while(height < 48) {
            do motionUp();
            do Sys.wait(25);
        }

        do Sys.wait(200);
        while(height > 0) {
            do Sys.wait(25);
            do motionDown();
        }  
        return;   
    }
   
    method boolean run() {
        if (~Alive) {
            return false;
        } else {
           do jump();
           return true;
        }
    }
}
